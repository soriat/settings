" Thomas Soria's Vimrc

call pathogen#infect()

" =============================================================================
" =========================== Configurations ==================================
" =============================================================================

set nocompatible " -------------------------------------------- Make VIM Behave

set guioptions=am " ----------- Only use AutoSelect and Meny Bar From VIM's GUI

set path=~/Code/**
set encoding=utf-8
set fileencoding=utf-8

filetype on " ------------------------------ Recognize Syntax by File Extension
filetype plugin on " ------------------ Allow Plugins to be Loaded by File Type
filetype indent on " ------------------------------------ Check for Indent File

set formatoptions+=ronl

set autowrite " ------------------------------- Automatic Save on Buffer Switch
set backspace=2 " ------------------ Allow Backspace to Delete Over Line Breaks

set gdefault " ---------------------------------------------- Assume :s Uses /g
set smartcase " ------------------ Searches are Case-Sensitive if Caps are Used
set ignorecase " ---------------- Otherwise, Ignore Case in Regular Expressions

" Tabs and Spaces
set expandtab " --------------------------------------- Expand Tabs With Spaces
set shiftwidth=3 " ------------------------------------- >> & << Shift 3 Spaces
set softtabstop=3 " ---------------------------------------- See Spaces as Tabs
set tabstop=3 " ------------------------------------------------- <Tab> = '   '
set wildmode=longest,list " -------------------- Tab Completion Works like Bash

set textwidth=80 " --------------------------------- Hard Wrap at 80 Characters
set virtualedit=block " -------------- Allow Cursor to Go Where There's no Char

set noerrorbells visualbell t_vb= " --------------- A Silent VIM is a Happy VIM

" =============================================================================
" ============================ Visual Changes =================================
" =============================================================================

syntax on
syntax enable

set mouse=a " ------------------- Ability to use Mouse to Switch Between Splits
set laststatus=2 " ----------------------------- Always Display the Status Line
set modeline " ------------------------------------------- Check for a ModeLine
set nowrap " -------------------------------------------------- Don't Soft Wrap
set number " --------------------------------------------- Display Line Numbers
set ruler " ---------------------------- Display Row, Column, and % of Document
set scrolloff=7 " ---------------------------- Keep 7+ lines Above/Below Cursor

set showcmd " ------------------------ Show Partial Commands in the Status Line
set showmatch " ---------------------------------- Show Matching (), {}, etc...
set showmode " ---------------------------------------------- Show Current Mode

set t_Co=16 " ---------------------------------------------- Set Terminal Color

set background=dark " --------------------------------------- Set Overall Theme
colorscheme darkmate

set incsearch " -------------------------- Immediately Highlight Search Matches
set nohls " --------------------------------- Don't Highlight All Regex Matches

highlight WhitespaceEOL ctermbg=black guibg=black
match WhitespaceEOL /\s\+$/

set cpoptions+=$ " ---------- Show Dollar Sign at the End of Text Being Changed

set cc=80 " --------------------------------- Set Color Column Length and Color
hi ColorColumn ctermbg=black guibg=black

let g:Powerline_theme="darkmate" " ------------------------- Darkmate Powerline
let g:Powerline_symbols="compatible"

let loaded_matchparen=0 " ---------------------- Automatic Bracket Highlighting

let g:syntastic_check_on_open=1 " -------------- Always Check for Syntax Errors

" =============================================================================
" ===================== Normal / Insert Mode Mappings =========================
" =============================================================================

" Save With Ctrl + S ----------------------------------------------------------
inoremap <C-s> <Esc>:w<CR>
inoremap <C-a> <Esc>
nnoremap <C-s> :w<CR>
nnoremap <C-x> :x<CR>

" Move with CTRL + Arrow Key --------------------------------------------------
nnoremap <silent> <C-Left> <c-w>h
nnoremap <silent> <C-Up> <c-w>k
nnoremap <silent> <C-Down> <c-w>
nnoremap <silent> <C-Right> <Esc><c-w>li

" Auto Insertions -------------------------------------------------------------
inoremap {<CR> {<CR>}<Esc>O
inoremap ({<CR> ({<CR>});<Esc>O
inoremap <?php<CR> <?php<CR>?><Esc>O
inoremap <?<Space> <?<Space>?><Esc>2hi<Space>
inoremap <?=<Space> <?=<Space>?><Esc>2hi<Space>
inoremap <<<<CR> <<<EOT<CR>EOT;<Esc>O<C-TAB><C-TAB><C-TAB>

" Easy Tabs -------------------------------------------------------------------
nnoremap <C-t><C-t> :set invexpandtab<CR>

" Keep Search Pattern at the Center of the Screen -----------------------------
nnoremap <silent> n nzz
nnoremap <silent> N Nzz

" Map Shift Arrows to Splits (XTerm 2 + tmux Logic) ---------------------------
inoremap <A-Right> <Esc><C-w>l
inoremap <A-Left>  <Esc><C-w>h
inoremap <A-Up>    <Esc><C-w>k
inoremap <A-Down>  <Esc><C-w>j

noremap <A-Right> <C-w>l
noremap <A-Left>  <C-w>h
noremap <A-Up>    <C-w>k
noremap <A-Down>  <C-w>j

" Attempt to get rid of my crippling addiction to arrow keys ------------------
imap kj <Esc>
"map <Left> <Nop>
"map <Right> <Nop>
"map <Up> <Nop>
"map <Down> <Nop>

" Vim Splits ------------------------------------------------------------------
map <C-h> <C-w><h
map <C-j> <C-w><j
map <C-k> <C-w><k
map <C-l> <C-w><l

" =============================================================================
" =========================== Leader Mappings =================================
" =============================================================================
let mapleader=","

" Split Windows With Sanity (V-Vertical), (S-Horizontal) ----------------------
nnoremap <leader>v <C-w>v<C-w>l
nnoremap <leader>s <C-w>s<C-w>j

" Open the File Under the Cursor ----------------------------------------------
nnoremap <Leader>ot <C-W>gf

" Toggle Paste Mode -----------------------------------------------------------
nnoremap <silent> <leader>p :set invpaste<CR>:set paste?<CR>

" Toggle Highlighting ---------------------------------------------------------
nnoremap <silent> <leader>m :set hlsearch! hlsearch?<CR>

" Logs ------------------------------------------------------------------------
nnoremap <silent> <leader>u oUtils::logMe();<Esc>hi
nnoremap <silent> <leader>U oUtils::logMe_r();<Esc>hi

" Langid Constants  -----------------------------------------------------------
nnoremap <silent> <leader>d iServerConstants::getSetting('default-locale');<Esc>
nnoremap <silent> <leader>v iServerConstants::getValue("Language.view");<Esc>

" Swap Window / buffer --------------------------------------------------------
nmap <silent> <leader>e :call MarkWindowSwap()<CR>
nmap <silent> <leader>r :call DoWindowSwap()<CR>

" Easy Motion -----------------------------------------------------------------
let g:EasyMotion_smartcase = 1
nmap s <Plug>(easymotion-s2)
nmap S <Plug>(easymotion-s)

" Strip trailing whitespace ---------------------------------------------------
nnoremap <leader><Space> :call <SID>StripTrailingWhitespaces()<CR>

" Open all changed files in splits --------------------------------------------
nnoremap <leader>o :OpenChangedFiles<CR>

" =============================================================================
" =========================== Helper Functions ================================
" =============================================================================
function! RestoreCursor()
   if line("'\"") <= line("$")
      normal! g`"
      normal! zz
   endif
endfunction
autocmd BufWinEnter * call RestoreCursor()

autocmd VimResized * exe "normal! \<c-w>="

" Reread Configuration of Vim if .vimrc is Saved ------------------------------
augroup VimConfig
   au!
   autocmd BufWritePost ~/.vimrc       so ~/.vimrc
   autocmd BufWritePost _vimrc         so ~/_vimrc
   autocmd BufWritePost vimrc          so ~/.vimrc
augroup END

" Window / Buffer Swapper -----------------------------------------------------
function! MarkWindowSwap()
   let g:markedWinNum = winnr()
endfunction

function! DoWindowSwap()
   let curNum = winnr()
   let curBuf = bufnr( "%" )
   exe g:markedWinNum . "wincmd w"
   let markedBuf = bufnr( "%" )
   exe 'hide buf' curBuf
   exe curNum . "wincmd w"
   exe 'hide buf' markedBuf
endfunction

" Strip trailing whitespace ---------------------------------------------------
function! <SID>StripTrailingWhitespaces()
   let _s=@/
   let l = line(".")
   let c = col(".")
   %s/\s\+$//e
   let @/=_s
   call cursor(l, c)
endfunction

function! OpenChangedFiles()
   only " Close all windows, unless they're modified
   let status = system('git status -s | grep "^ \?\(M\|A\)" | cut -d " " -f 3')
   let filenames = split(status, "\n")
   if len(filenames) > 0
      exec "edit " . filenames[0]
      for filename in filenames[1:]
         exec "vs " . filename
      endfor
   end
endfunction
command! OpenChangedFiles :call OpenChangedFiles()

function! Tab_Or_Complete()
   if col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^\w'
      return "\<C-N>"
   else
      return "\<Tab>"
   endif
endfunction
inoremap <Tab> <C-R>=Tab_Or_Complete()<CR>
set dictionary="/usr/dict/words"
